services:
  # MySQL Database
  mysql:
    image: mysql:8.0
    container_name: flyinghotel_mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD:-rootpassword}
      MYSQL_DATABASE: ${MYSQL_DATABASE:-flyinghotel}
      MYSQL_USER: ${MYSQL_USER:-flyinghotel_user}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD:-flyinghotel_pass}
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
    networks:
      - flyinghotel_network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10

  # Redis Cache & Message Broker
  redis:
    image: redis:7-alpine
    container_name: flyinghotel_redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - flyinghotel_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Adminer - Database Management UI
  adminer:
    image: adminer:latest
    container_name: flyinghotel_adminer
    restart: unless-stopped
    ports:
      - "8080:8080"
    networks:
      - flyinghotel_network
    depends_on:
      - mysql
    environment:
      ADMINER_DEFAULT_SERVER: mysql

  # FastAPI Backend
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: flyinghotel_backend
    restart: unless-stopped
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
      - backend_uploads:/app/uploads
    environment:
      DATABASE_URL: mysql+aiomysql://${MYSQL_USER:-flyinghotel_user}:${MYSQL_PASSWORD:-flyinghotel_pass}@mysql:3306/${MYSQL_DATABASE:-flyinghotel}?charset=utf8mb4
      REDIS_URL: redis://redis:6379/0
      SECRET_KEY: ${SECRET_KEY:-your-secret-key-change-this-in-production}
      TELEGRAM_BOT_TOKEN: ${TELEGRAM_BOT_TOKEN:-}
      ENVIRONMENT: ${ENVIRONMENT:-development}
    networks:
      - flyinghotel_network
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload

  # Celery Worker
  celery-worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: flyinghotel_celery_worker
    restart: unless-stopped
    volumes:
      - ./backend:/app
    environment:
      DATABASE_URL: mysql+aiomysql://${MYSQL_USER:-flyinghotel_user}:${MYSQL_PASSWORD:-flyinghotel_pass}@mysql:3306/${MYSQL_DATABASE:-flyinghotel}?charset=utf8mb4
      REDIS_URL: redis://redis:6379/0
      SECRET_KEY: ${SECRET_KEY:-your-secret-key-change-this-in-production}
      TELEGRAM_BOT_TOKEN: ${TELEGRAM_BOT_TOKEN:-}
      ENVIRONMENT: ${ENVIRONMENT:-development}
    networks:
      - flyinghotel_network
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: celery -A app.tasks.celery_app worker --loglevel=info

  # Vue 3 Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: flyinghotel_frontend
    restart: unless-stopped
    ports:
      - "5173:5173"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    environment:
      VITE_API_URL: ${VITE_API_URL:-http://localhost:8000}
      VITE_WS_URL: ${VITE_WS_URL:-ws://localhost:8000}
    networks:
      - flyinghotel_network
    depends_on:
      - backend
    command: npm run dev -- --host 0.0.0.0

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: flyinghotel_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "3000:3000"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
    networks:
      - flyinghotel_network
    depends_on:
      - backend
      - frontend

networks:
  flyinghotel_network:
    driver: bridge

volumes:
  mysql_data:
  redis_data:
  backend_uploads:
